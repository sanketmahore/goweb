// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	authentication "crud/src/authentication"
	domain "crud/src/domain"

	mock "github.com/stretchr/testify/mock"
)

// BookingDao is an autogenerated mock type for the BookingDao type
type BookingDao struct {
	mock.Mock
}

// AuthenticateUser provides a mock function with given fields: creds
func (_m *BookingDao) AuthenticateUser(creds *authentication.Credentials) (bool, error) {
	ret := _m.Called(creds)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*authentication.Credentials) bool); ok {
		r0 = rf(creds)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*authentication.Credentials) error); ok {
		r1 = rf(creds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBooking provides a mock function with given fields: booking
func (_m *BookingDao) CreateBooking(booking *domain.Booking) error {
	ret := _m.Called(booking)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Booking) error); ok {
		r0 = rf(booking)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBooking provides a mock function with given fields: id
func (_m *BookingDao) DeleteBooking(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReturnAllBookings provides a mock function with given fields:
func (_m *BookingDao) ReturnAllBookings() []*domain.Booking {
	ret := _m.Called()

	var r0 []*domain.Booking
	if rf, ok := ret.Get(0).(func() []*domain.Booking); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Booking)
		}
	}

	return r0
}

// ReturnSingleBooking provides a mock function with given fields: id
func (_m *BookingDao) ReturnSingleBooking(id string) (*domain.Booking, error) {
	ret := _m.Called(id)

	var r0 *domain.Booking
	if rf, ok := ret.Get(0).(func(string) *domain.Booking); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Booking)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBooking provides a mock function with given fields: booking
func (_m *BookingDao) UpdateBooking(booking *domain.Booking) error {
	ret := _m.Called(booking)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Booking) error); ok {
		r0 = rf(booking)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
